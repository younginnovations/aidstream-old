<?php
/**
 * Class to Generate iati xml.
 *
 * @author bhabishyat <bhabishyat@gmail.com>
 */
class Iati_Core_Xml
{
    const SCHEMA_VERSION = 2.01;

    protected $xml;
    protected $xmlPath;
    protected $childrenIds;


    /**
     * Set XmlPath 
     */
    public function __construct()
    {
        $config = new Zend_Config_Ini(APPLICATION_PATH.'/configs/application.ini', APPLICATION_ENV);       
        $this->xmlPath = $config->public_folder.$config->xml_folder; 
    }
    
    public function setChildrenIds($childrenIds){
        $this->childrenIds= $childrenIds;
    }
    
    public function generateXml($name , $ids = array())
    {   
        $this->setChildrenIds($ids);
        if($name == "Activity")
        {
            $this->xml = new SimpleXMLElement('<?xml version="1.0" encoding="UTF-8"?><iati-activities><!-- Generated By AidStream --></iati-activities>');
            
            $identity = Zend_Auth::getInstance()->getIdentity();
            $model = new Model_DefaultFieldValues();
            $linkedDataDefault = $model->getByOrganisationId($identity->account_id , 'linked_data_default');
            if($linkedDataDefault) {
                $this->xml->addAttribute('linked_data_default' , $linkedDataDefault);
            }
        } else if(strtolower($name) == 'organisation'){
            $this->xml = new SimpleXMLElement('<?xml version="1.0" encoding="UTF-8"?><iati-organisations><!-- Generated By AidStream --></iati-organisations>');        
        } else {
            $this->xml = new SimpleXMLElement('<?xml version="1.0" encoding="UTF-8"?><'.strtolower($name).'s><!-- Generated By AidStream --></'.strtolower($name).'s>');
        }
        $this->xml->addAttribute('generated-datetime',gmdate('c'));
        $this->xml->addAttribute('version',self::SCHEMA_VERSION);

        if(!empty($this->childrenIds)){
            foreach($this->childrenIds as $childId){
                $childElementClass = "Iati_Aidstream_Element_".ucfirst($name);
                $childElement = new $childElementClass();
                $data = $childElement->fetchData($childId);
                $childElement->setData($data[$childElement->getClassName()]);
                $childElement->getXml($this->xml);
            }
        }

        $prettyXml = $this->formatXml($this->xml);
        return $prettyXml;
    }
    
    /**
     * Write generate xml data to file 
     * @param string $name,organisation
     * @param array $ids,organisation ids
     * @param string $publisherId,publisher id
     * @return string ,file name
     */
    public function generateFile($name , $ids = array(), $publisherId)
    {  
        $fileName = $publisherId."-org.xml";
        $fp = fopen($this->xmlPath.$fileName,'w');
        fwrite($fp,$this->generateXml($name , $ids));
        fclose($fp);

        return $fileName;
    }

    /**
     * Prettify xml from simpleXmlObject, format XML to save indented tree rather than one line
     * @param  object $simpleXmlObject
     * @return string xml
     */
    public function formatXml($simpleXmlObject) {
        if(!is_object($simpleXmlObject) ) {
            return;
        }
        $dom = new DOMDocument('1.0');
        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = true;
        $dom->loadXML($simpleXmlObject->asXML());
        return $dom->saveXML();
    }

    protected function libxml_display_error($error)
    {
        $return = '';
        switch ($error->level) {
            case LIBXML_ERR_WARNING:
                $return .= "Warning $error->code:";
                break;
            case LIBXML_ERR_ERROR:
                $return .= "Error $error->code:";
                break;
            case LIBXML_ERR_FATAL:
                $return .= "Fatal Error $error->code:";
                break;
        }
        $return .= trim($error->message);
        return $return;
    }

    protected function libxml_display_errors()
    {
        $errors = libxml_get_errors();
        $messages = [];
        foreach ($errors as $error) {
            $messages[] = $this->libxml_display_error($error);
        }
        libxml_clear_errors();
        return $messages;
    }

    /**
     *
     * Generates array xml and checks it against xml schema.
     * @param $activitiesIds of activity to be published.
     */
    public function validateXml($type,$activitiesIds)
    {
        if($type=='Activity') {
            $schemaPath = APPLICATION_PATH .'/XmlSchema/iati-activities-schema.xsd';
        }else if($type =='organisation') {
            $schemaPath = APPLICATION_PATH .'/XmlSchema/iati-organisations-schema.xsd';
        }
        $g = $this->generateXml($type, $activitiesIds);
        // Enable user error handling
        libxml_use_internal_errors(true);
        $xml = new DOMDocument();
        $xml->loadXML($g);
        $message = [];
        if (!$xml->schemaValidate($schemaPath)) {
            $message = $this->libxml_display_errors();
        }
        return $message;
    }
}